import streamlit as st
import sys
import os

# --- –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ katana ---
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 
katana.
# –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ streamlit_app.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ, –∞ katana - —ç—Ç–æ 
–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 
'.')))
print(f"[DEBUG] sys.path (streamlit_app.py): {sys.path}")
SELF_EVOLVER_AVAILABLE = False # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
try:
    from katana.self_evolve import SelfEvolver
    SELF_EVOLVER_AVAILABLE = True
    print("[DEBUG] SelfEvolver imported successfully.")
except ImportError as ie:
    print(f"[ERROR] Failed to import SelfEvolver: {ie}. Check if 
katana/self_evolve.py exists and is correct.")
except Exception as e:
    print(f"[ERROR] An unexpected error occurred during SelfEvolver 
import: {e}")
# --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ katana ---

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Katana Interface", page_icon="‚öîÔ∏è", 
layout="centered")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ CSS –¥–ª—è —Ç—ë–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –∏ —Å–≤–µ—Ç–ª–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
st.markdown(
    """
    <style>
    /* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    .stApp {
        background-color: #121212;
    }
    /* –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Streamlit –∏–ª–∏ –µ—Å–ª–∏ .stApp –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç */
    .reportview-container .main {
        background-color: #121212;
        color: #e0e0e0;
    }
    body > #root > div:nth-child(1) > div:nth-child(1) > div > div {
        background-color: #121212; /* –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä */
    }

    /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
    body, .stMarkdown, p, li, label {
        color: #e0e0e0;
    }

    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3, h4, h5, h6 {
        color: #f5f5f5; /* –ß—É—Ç—å —è—Ä—á–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
    }

    /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ */
    .stTextInput > div > div > input, .stTextArea > div > div > textarea {
        background-color: #333333 !important;
        color: #e0e0e0 !important;
        border: 1px solid #4f4f4f !important;
    }
    
    /* Placeholder –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ */
    .stTextInput input::placeholder {
        color: #a0a0a0 !important;
    }

    /* –ö–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –±—É–¥—É—Ç) */
    .stButton > button {
        background-color: #4a4a4a;
        color: #e0e0e0;
        border: 1px solid #5f5f5f;
    }
    .stButton > button:hover {
        background-color: #5a5a5a;
        border-color: #6f6f6f;
    }

    /* –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ */
    [data-testid="chat-message-container"] {
        background-color: #2a2a2a;
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #383838;
    }
    [data-testid="stChatMessageContent"] p, 
[data-testid="stChatMessageContent"] div {
        color: #e0e0e0 !important; /* –í–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è */
    }
    </style>
    """,
    unsafe_allow_html=True,
)

st.title("ü§ñ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ Katana")
st.markdown("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Katana!")
print("[DEBUG] streamlit_app.py: UI elements (title, markdown) rendered.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Katana –≤ session_state
if "history" not in st.session_state:
    st.session_state.history = []
    print("[DEBUG] Chat history initialized in session_state.")

if SELF_EVOLVER_AVAILABLE and 'katana_instance' not in st.session_state:
    try:
        st.session_state.katana_instance = SelfEvolver()
        print("[DEBUG] SelfEvolver instance created and cached in 
session_state.")
    except Exception as e:
        print(f"[ERROR] Failed to create SelfEvolver instance: {e}")
        # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º SELF_EVOLVER_AVAILABLE –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ 
False –∏–∑ –±–ª–æ–∫–∞ –∏–º–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KatanaAgent: {e}")


def get_katana_response_from_backend(user_query: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç KatanaAgent (SelfEvolver).
    """
    print(f"[DEBUG] get_katana_response_from_backend called with query: 
'{user_query}'")
    if not SELF_EVOLVER_AVAILABLE:
        error_msg = "‚ö†Ô∏è KatanaAgent (SelfEvolver) –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. 
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –Ω–∞ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞."
        print(f"[ERROR] {error_msg}")
        return error_msg
    if 'katana_instance' not in st.session_state:
        error_msg = "‚ö†Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä KatanaAgent (SelfEvolver) –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. 
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –Ω–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
        print(f"[ERROR] {error_msg}")
        return error_msg
    
    try:
        katana = st.session_state.katana_instance
        response = katana.generate_patch(user_query)
        print(f"[DEBUG] SelfEvolver.generate_patch returned: 
'{response}'")
        if response is None:
            return "–ö–∞—Ç–∞–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –Ω–æ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç 
(–ø–æ–ª—É—á–µ–Ω None)."
        return response
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å KatanaAgent: {e}"
        print(f"[ERROR] Exception in get_katana_response_from_backend: 
{error_msg}", exc_info=True)
        return error_msg

# –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑—É–µ–º st.chat_input –¥–ª—è –±–æ–ª–µ–µ "—á–∞—Ç–æ–≤–æ–≥–æ" –≤–∏–¥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π 
–æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è
user_input = st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å –∫ Katana:")
print(f"[DEBUG] streamlit_app.py: Checked for user_input from chat_input. 
Value: '{user_input if user_input else 'None'}'")

if user_input:
    print(f"[DEBUG] User input received: '{user_input}'")
    st.session_state.history.append({"role": "user", "content": 
user_input})
    
    print("[DEBUG] Calling Katana backend for response...")
    bot_response_content = get_katana_response_from_backend(user_input)
    st.session_state.history.append({"role": "assistant", "content": 
bot_response_content})
    print(f"[DEBUG] Bot response added to history: 
'{bot_response_content}'")
    # st.chat_input –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç rerun, –ø–æ—ç—Ç–æ–º—É –∏—Å—Ç–æ—Ä–∏—è 
–æ–±–Ω–æ–≤–∏—Ç—Å—è

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if st.session_state.history:
    # print(f"[DEBUG] Displaying chat history. Items: 
{len(st.session_state.history)}") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ª–æ–≥ 
–ø—Ä–∏ –∫–∞–∂–¥–æ–º rerun
    for message_entry in st.session_state.history:
        role = message_entry.get("role")
        content = message_entry.get("content")
        if role and content is not None: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ content –Ω–µ None
            with st.chat_message(role, avatar="‚öîÔ∏è" if role == "assistant" 
else None):
                st.markdown(str(content)) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ content —ç—Ç–æ 
—Å—Ç—Ä–æ–∫–∞
else:
    print("[DEBUG] Chat history is empty. Nothing to display yet.")

if not SELF_EVOLVER_AVAILABLE:
    st.warning("–í–Ω–∏–º–∞–Ω–∏–µ: KatanaAgent (SelfEvolver) –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. 
–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ 
–Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞.")

print(f"[DEBUG] streamlit_app.py: Script execution finished for this run. 
User input was: '{user_input if user_input else 'None'}'")
