import logging
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any, Tuple
from collections import Counter

# Assuming MemoryManager is accessible, adjust import path if necessary
from src.memory.memory_manager import MemoryManager

logger = logging.getLogger(__name__)

# Initialize MemoryManager instance (consider how this is best managed - dependency injection?)
# For now, direct instantiation for simplicity in this module.
# This might need to be passed in or configured if Redis settings are not globally available.
try:
    # These would ideally come from a shared configuration
    import os
    # Changed from 'localhost' to '127.0.0.1' for redis_host default
    redis_host = os.getenv('REDIS_HOST', '127.0.0.1')
    redis_port = int(os.getenv('REDIS_PORT', '6379'))
    redis_password = os.getenv('REDIS_PASSWORD', None)
    redis_db = int(os.getenv('REDIS_DB', '0'))

    memory_manager = MemoryManager(
        host=redis_host,
        port=redis_port,
        db=redis_db,
        password=redis_password
    )
    if not memory_manager.redis_client:
        logger.error("Reporter: Failed to initialize MemoryManager due to Redis connection issue.")
        # Fallback or raise error - for now, functions might fail if memory_manager is not usable
        # To ensure memory_manager is None if redis_client is None after attempted init
        memory_manager = None
except Exception as e:
    logger.error(f"Reporter: Error initializing MemoryManager: {e}", exc_info=True)
    memory_manager = None # Ensure it's None if initialization fails

def get_notes_for_period(chat_id: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MemoryManager –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    if not memory_manager or not memory_manager.redis_client:
        logger.error(f"MemoryManager not available for chat_id {chat_id}")
        return []

    full_history = memory_manager.get_history(chat_id)
    notes_in_period = []

    for message in full_history:
        if message.get("role") == "user": # Consider only user messages as 'notes'
            timestamp_str = message.get("timestamp")
            if timestamp_str:
                try:
                    # Ensure timestamp is offset-aware for comparison
                    msg_timestamp = datetime.fromisoformat(timestamp_str)
                    if msg_timestamp.tzinfo is None:
                        msg_timestamp = msg_timestamp.replace(tzinfo=timezone.utc) # Assume UTC if not specified

                    if start_date <= msg_timestamp <= end_date:
                        notes_in_period.append(message)
                except ValueError:
                    logger.warning(f"Could not parse timestamp {timestamp_str} for message in chat {chat_id}")
    return notes_in_period

def analyze_notes(notes: List[Dict[str, Any]]) -> Tuple[List[str], List[str], Dict[str, Any]]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤, –≥–æ—Ä—è—á–∏—Ö —Ç–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    (–ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    """
    if not notes:
        return [], [], {"total_notes": 0, "notes_by_day": {}}

    # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã (–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    key_insights = [note['content'][:100] + "..." if len(note['content']) > 100 else note['content']
                    for note in notes if note.get('content')]
    key_insights = key_insights[:3] # –ü–µ—Ä–≤—ã–µ 3

    # –ì–æ—Ä—è—á–∏–µ —Ç–µ–º—ã (—Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –±–æ–ª–µ–µ 3 –±—É–∫–≤, –Ω–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞)
    # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    stop_words = set([
        "–∏", "–≤", "–≤–æ", "–Ω–µ", "—á—Ç–æ", "–æ–Ω", "–Ω–∞", "—è", "—Å", "—Å–æ", "–∫–∞–∫", "–∞", "—Ç–æ", "–≤—Å–µ", "–æ–Ω–∞", "—Ç–∞–∫", "–µ–≥–æ", "–Ω–æ", "–¥–∞", "—Ç—ã", "–∫", "—É", "–∂–µ",
        "–≤—ã", "–∑–∞", "–±—ã", "–ø–æ", "—Ç–æ–ª—å–∫–æ", "–µ–µ", "–º–Ω–µ", "–±—ã–ª–æ", "–≤–æ—Ç", "–æ—Ç", "–º–µ–Ω—è", "–µ—â–µ", "–Ω–µ—Ç", "–æ", "–∏–∑", "–µ–º—É", "—Ç–µ–ø–µ—Ä—å", "–∫–æ–≥–¥–∞", "–¥–∞–∂–µ",
        "–Ω—É", "–≤–¥—Ä—É–≥", "–ª–∏", "–µ—Å–ª–∏", "—É–∂–µ", "–∏–ª–∏", "–Ω–∏", "–±—ã—Ç—å", "–±—ã–ª", "–Ω–µ–≥–æ", "–¥–æ", "–≤–∞—Å", "–Ω–∏–±—É–¥—å", "–æ–ø—è—Ç—å", "—É–∂", "–≤–∞–º", "–≤–µ–¥—å", "—Ç–∞–º",
        "–ø–æ—Ç–æ–º", "—Å–µ–±—è", "–Ω–∏—á–µ–≥–æ", "–µ–π", "–º–æ–∂–µ—Ç", "–æ–Ω–∏", "—Ç—É—Ç", "–≥–¥–µ", "–µ—Å—Ç—å", "–Ω–∞–¥–æ", "–Ω–µ–π", "–¥–ª—è", "–º—ã", "—Ç–µ–±—è", "–∏—Ö", "—á–µ–º", "–±—ã–ª–∞", "—Å–∞–º",
        "—á—Ç–æ–±", "–±–µ–∑", "–±—É–¥—Ç–æ", "—á–µ–≥–æ", "—Ä–∞–∑", "—Ç–æ–∂–µ", "—Å–µ–±–µ", "–ø–æ–¥", "–±—É–¥–µ—Ç", "–∂", "—Ç–æ–≥–¥–∞", "–∫—Ç–æ", "—ç—Ç–æ—Ç", "—Ç–æ–≥–æ", "–ø–æ—Ç–æ–º—É", "—ç—Ç–æ–≥–æ", "–∫–∞–∫–æ–π",
        "—Å–æ–≤—Å–µ–º", "–Ω–∏–º", "–∑–¥–µ—Å—å", "—ç—Ç–æ–º", "–æ–¥–∏–Ω", "–ø–æ—á—Ç–∏", "–º–æ–π", "—Ç–µ–º", "—á—Ç–æ–±—ã", "–Ω–µ–µ", "—Å–µ–π—á–∞—Å", "–±—ã–ª–∏", "–∫—É–¥–∞", "–∑–∞—á–µ–º", "–≤—Å–µ—Ö", "–Ω–∏–∫–æ–≥–¥–∞",
        "–º–æ–∂–Ω–æ", "–ø—Ä–∏", "–Ω–∞–∫–æ–Ω–µ—Ü", "–¥–≤–∞", "–æ–±", "–¥—Ä—É–≥–æ–π", "—Ö–æ—Ç—å", "–ø–æ—Å–ª–µ", "–Ω–∞–¥", "–±–æ–ª—å—à–µ", "—Ç–æ—Ç", "—á–µ—Ä–µ–∑", "—ç—Ç–∏", "–Ω–∞—Å", "–ø—Ä–æ", "–≤—Å–µ–≥–æ", "–Ω–∏—Ö",
        "–∫–∞–∫–∞—è", "–º–Ω–æ–≥–æ", "—Ä–∞–∑–≤–µ", "—Ç—Ä–∏", "—ç—Ç—É", "–º–æ—è", "–≤–ø—Ä–æ—á–µ–º", "—Ö–æ—Ä–æ—à–æ", "—Å–≤–æ—é", "—ç—Ç–æ–π", "–ø–µ—Ä–µ–¥", "–∏–Ω–æ–≥–¥–∞", "–ª—É—á—à–µ", "—á—É—Ç—å", "—Ç–æ–º", "–Ω–µ–ª—å–∑—è",
        "—Ç–∞–∫–æ–π", "–∏–º", "–±–æ–ª–µ–µ", "–≤—Å–µ–≥–¥–∞", "–∫–æ–Ω–µ—á–Ω–æ", "–≤—Å—é", "–º–µ–∂–¥—É",
        "the", "a", "an", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "do", "does", "did", "will", "would", "should",
        "can", "could", "may", "might", "must", "and", "but", "or", "nor", "for", "so", "yet", "if", "then", "else", "when", "where", "why",
        "how", "what", "which", "who", "whom", "whose", "this", "that", "these", "those", "i", "you", "he", "she", "it", "we", "they", "me",
        "him", "her", "us", "them", "my", "your", "his", "its", "our", "their", "mine", "yours", "hers", "ours", "theirs", "to", "of", "in",
        "on", "at", "by", "from", "with", "about", "against", "between", "into", "through", "during", "before", "after", "above", "below",
        "up", "down", "out", "over", "under", "again", "further", "then", "once", "here", "there", "all", "any", "both", "each", "few", "more",
        "most", "other", "some", "such", "no", "not", "only", "own", "same", "too", "very", "s", "t"
    ])

    word_counts = Counter()
    for note in notes:
        content = note.get('content', '')
        words = [word.strip('.,!?"\'`¬´¬ª‚Äû‚Äú#$%^&*()[]{}<>:;').lower() for word in content.split()]
        for word in words:
            if len(word) > 3 and word not in stop_words:
                word_counts[word] += 1

    hot_topics = [word for word, count in word_counts.most_common(5)] # –¢–æ–ø-5 —Å–ª–æ–≤

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    total_notes = len(notes)
    notes_by_day = Counter()
    for note in notes:
        timestamp_str = note.get("timestamp")
        if timestamp_str:
            try:
                msg_timestamp = datetime.fromisoformat(timestamp_str)
                notes_by_day[msg_timestamp.strftime('%A')] += 1 # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            except ValueError:
                pass

    activity_stats = {
        "total_notes": total_notes,
        "notes_by_day": dict(notes_by_day.most_common()) # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    }

    return key_insights, hot_topics, activity_stats

def format_report_markdown(chat_id: str, key_insights: List[str], hot_topics: List[str], activity_stats: Dict[str, Any], report_period_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ Markdown.
    """
    report_lines = [
        f"# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–º–µ—Ç–∫–∞–º ({report_period_str})\n"
        f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{chat_id}`\n"
    ]

    report_lines.append("## üåü –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:\n")
    if key_insights:
        for i, insight in enumerate(key_insights):
            report_lines.append(f"{i+1}. {insight}")
    else:
        report_lines.append("_–ó–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ._\n")

    report_lines.append("\n## üî• –ì–æ—Ä—è—á–∏–µ —Ç–µ–º—ã (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞):\n")
    if hot_topics:
        report_lines.append(", ".join([f"`{topic}`" for topic in hot_topics]))
    else:
        report_lines.append("_–ì–æ—Ä—è—á–∏—Ö —Ç–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ._\n")

    report_lines.append("\n## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n")
    report_lines.append(f"- –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: **{activity_stats.get('total_notes', 0)}**")
    if activity_stats.get('notes_by_day'):
        report_lines.append("- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:")
        for day, count in activity_stats['notes_by_day'].items():
            report_lines.append(f"  - {day}: {count} –∑–∞–º–µ—Ç–æ–∫")
    else:
        report_lines.append("_–î–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç._\n")

    report_lines.append("\n---\n_–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏._")

    return "\n".join(report_lines)

def generate_weekly_report(chat_id: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ chat_id.
    """
    if not memory_manager or not memory_manager.redis_client:
        logger.error(f"MemoryManager is not initialized or not connected. Cannot generate report for chat_id {chat_id}.")
        return "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç."

    now = datetime.now(timezone.utc)
    end_date = now
    start_date = now - timedelta(days=7)

    report_period_str = f"{start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}"
    logger.info(f"Generating weekly report for chat_id {chat_id} for period: {report_period_str}")

    notes = get_notes_for_period(chat_id, start_date, end_date)

    if not notes:
        logger.info(f"No notes found for chat_id {chat_id} in the last 7 days.")
        return f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é ({report_period_str}) —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –∑–∞–º–µ—Ç–æ–∫. –û—Ç—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω."

    key_insights, hot_topics, activity_stats = analyze_notes(notes)

    report_markdown = format_report_markdown(chat_id, key_insights, hot_topics, activity_stats, report_period_str)

    logger.info(f"Successfully generated weekly report for chat_id {chat_id}. Total notes: {activity_stats['total_notes']}")
    return report_markdown

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—É–¥—É—â–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –±–æ—Ç–æ–º)
# def send_weekly_digests(bot_instance):
# """
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
# (–¢—Ä–µ–±—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞)
# """
#    logger.info("Attempting to send weekly digests...")
#    # Placeholder: –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö chat_id?
#    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
#    # –í–∞—Ä–∏–∞–Ω—Ç 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ Redis –≤–∏–¥–∞ "chat_history:*" - –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ.
#    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç, –∏—Ö chat_id —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫.
#
#    # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Å–µ–≤–¥–æ–∫–æ–¥, –µ—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª —Å–ø–∏—Å–æ–∫ chat_ids:
#    # all_chat_ids = get_all_subscribed_chat_ids() # hypothetical function
#    # for chat_id in all_chat_ids:
#    #     try:
#    #         report = generate_weekly_report(chat_id)
#    #         if bot_instance and hasattr(bot_instance, 'send_message'):
#    #             bot_instance.send_message(chat_id, report, parse_mode="Markdown")
#    #             logger.info(f"Sent weekly digest to {chat_id}")
#    #         else:
#    #             logger.error(f"Bot instance not provided or lacks send_message for chat_id {chat_id}")
#    #     except Exception as e:
#    #         logger.error(f"Failed to send weekly digest to {chat_id}: {e}", exc_info=True)
#    logger.warning("send_weekly_digests is not fully implemented yet.")


if __name__ == '__main__':
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Redis —Å –¥–∞–Ω–Ω—ã–º–∏)
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # –î–ª—è —Ç–µ—Å—Ç–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ REDIS_HOST –∏ —Ç.–¥. —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    # –∏–ª–∏ MemoryManager —Å–º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ localhost:6379

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ memory_manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
    if not memory_manager or not memory_manager.redis_client:
        logger.error("Memory Manager is not available. Exiting example.")
        exit(1)

    # –ü—Ä–∏–º–µ—Ä chat_id, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ
    test_chat_id_report = "test_report_user_123"
    logger.info(f"--- Generating example weekly report for chat_id: {test_chat_id_report} ---")

    # –î–æ–±–∞–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    now_ts = datetime.now(timezone.utc)
    if not memory_manager.get_history(test_chat_id_report):
        logger.info(f"Adding some sample data for {test_chat_id_report} for testing purposes...")
        messages_to_add = [
            {"role": "user", "content": "–ü–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –æ –ø—Ä–æ–µ–∫—Ç–µ –ö–∞—Ç–∞–Ω–∞. –ù—É–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.", "timestamp": (now_ts - timedelta(days=6)).isoformat()},
            {"role": "assistant", "content": "–ü–æ–Ω—è–ª.", "timestamp": (now_ts - timedelta(days=6, hours=-1)).isoformat()},
            {"role": "user", "content": "–û–±—Å—É–¥–∏–ª–∏ –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ –ø–æ–≤–æ–¥—É NLP –º–æ–¥–µ–ª–µ–π. OpenAI –∏–ª–∏ Anthropic?", "timestamp": (now_ts - timedelta(days=5)).isoformat()},
            {"role": "user", "content": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", "timestamp": (now_ts - timedelta(days=4)).isoformat()},
            {"role": "user", "content": "–ö–ª—é—á–µ–≤–æ–π –∏–Ω—Å–∞–π—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ —è—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.", "timestamp": (now_ts - timedelta(days=3)).isoformat()},
            {"role": "user", "content": "–ì–æ—Ä—è—á–∞—è —Ç–µ–º–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞.", "timestamp": (now_ts - timedelta(days=2)).isoformat()},
            {"role": "user", "content": "–ï—â–µ –æ–¥–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –ø—Ä–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.", "timestamp": (now_ts - timedelta(days=1)).isoformat()},
            {"role": "user", "content": "–§–∏–Ω–∞–ª—å–Ω–∞—è –º—ã—Å–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.", "timestamp": (now_ts - timedelta(hours=5)).isoformat()},
        ]
        for msg in messages_to_add:
            memory_manager.add_message_to_history(test_chat_id_report, msg)
        logger.info(f"Added {len(messages_to_add)} sample messages for {test_chat_id_report}.")

    report = generate_weekly_report(test_chat_id_report)
    print("\n--- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç: ---\n")
    print(report)

    logger.info(f"--- Example report generation finished for chat_id: {test_chat_id_report} ---")

    # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–º–µ—Ç–æ–∫
    test_empty_chat_id = "test_empty_user_456"
    memory_manager.clear_history(test_empty_chat_id) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç
    logger.info(f"--- Generating example weekly report for chat_id with no notes: {test_empty_chat_id} ---")
    empty_report = generate_weekly_report(test_empty_chat_id)
    print("\n--- –û—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–º–µ—Ç–æ–∫: ---\n")
    print(empty_report)
    logger.info(f"--- Example report generation finished for chat_id: {test_empty_chat_id} ---")
