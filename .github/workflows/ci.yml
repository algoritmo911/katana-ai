name: Katana Bot CI

on:
  push:
    branches: [ "dev", "main" ] # Or your primary development/main branches
  pull_request:
    branches: [ "dev", "main" ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"] # Test against a few Python versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with Flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        # More specific flake8 command if you have specific configurations or paths:
        # flake8 bot/ tools/ run_bot_locally.py --count --max-line-length=120 --statistics

    - name: Test with Pytest
      run: |
        # This assumes your tests are discoverable by pytest (e.g., in bot/tests/)
        # and don't require live API tokens for unit/integration tests.
        # If tests need environment variables, you'd configure them here using secrets.
        # Example:
        # env:
        #   KATANA_TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN_FOR_TESTS }} # If you had such a secret
        pytest
      # If tests require specific environment variables (even dummy ones) to run,
      # you can set them here. For actual secrets, use GitHub encrypted secrets.
      # env:
      #   EXAMPLE_VAR: "test_value"

  # Placeholder for a build/package job if you had one
  # build:
  #   needs: lint-and-test # Run after linting and testing
  #   if: github.ref == 'refs/heads/main' # Example: only build on pushes to main
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10' # Or your target Python version for build
  #   - name: Install build tools
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install setuptools wheel twine # Example build tools
  #   - name: Build package
  #     run: |
  #       python setup.py sdist bdist_wheel # If you have a setup.py
  #   - name: Archive production artifacts
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: python-package
  #       path: dist/*
  #   # - name: Publish to PyPI
  #   #   if: success() && startsWith(github.ref, 'refs/tags') # Example: publish on tags
  #   #   uses: pypa/gh-action-pypi-publish@release/v1
  #   #   with:
  #   #     user: __token__
  #   #     password: ${{ secrets.PYPI_API_TOKEN }}
