# This is an example logrotate configuration for the Katana Bot.
# Place this file in /etc/logrotate.d/katana-bot
# Adjust the path to the log file as needed.

# Default path, assuming LOG_FILE_PATH in .env is set to /var/log/katana-bot/katana-bot.log
/var/log/katana-bot/katana-bot.log {
    daily            # Rotate logs daily
    missingok        # Don't error if the log file is missing
    rotate 7         # Keep 7 days of rotated logs
    compress         # Compress rotated logs (usually with gzip)
    delaycompress    # Delay compression to the next rotation cycle (good if service might still write to it)
    notifempty       # Don't rotate the log if it's empty
    create 0640 katana_bot_user adm  # Create new log file with specified permissions and ownership.
                     # Replace 'katana_bot_user' with the user running the bot.
                     # 'adm' group is often used for log file access. Adjust as needed.
    sharedscripts    # Run postrotate script once after all logs matching the wildcard are rotated

    postrotate
        # If your bot or its systemd service needs to be signaled after log rotation
        # (e.g., to reopen log files), you can add commands here.
        # For Python's FileHandler, this is often not strictly necessary if it reopens on write error,
        # but for some applications, a HUP signal is sent.
        # Example for systemd:
        # systemctl kill -s HUP katana-bot.service
        #
        # However, standard Python logging FileHandlers usually don't require a SIGHUP
        # to reopen the file. The new log file is created by logrotate, and the application
        # should continue writing to the new file if it was recreated, or handle the old (renamed) file
        # until it closes and reopens it or if it uses a library that handles this gracefully.
        # For basic Python logging, it's often sufficient that the file is moved and a new one created.
        # The application will then create and write to the new file with the original name.
        # If issues arise, investigate signaling the application or using 'copytruncate'.

        # The 'copytruncate' option is an alternative to renaming the log file.
        # It copies the log file, then truncates the original. This doesn't require
        # signaling the application but has a small chance of log loss during the copy.
        # Example using copytruncate (use instead of create/postrotate signal if preferred):
        # copytruncate
    endscript
}

# If you log to multiple files, you can add more blocks:
# /var/log/katana-bot/another-katana-bot.log {
#   ... (similar options)
# }
