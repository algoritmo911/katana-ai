import os
import logging
from openai import OpenAI, RateLimitError, APIConnectionError, OpenAIError

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class KatanaAgent:
    """
    The Katana Terminal Agent that interacts with the OpenAI LLM.
    """
    def __init__(self):
        """
        Initializes the KatanaAgent, setting up the OpenAI client and persona.
        """
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable not found. –ö–∞—Ç–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ–∑ –∫–ª—é—á–∞.")

        self.client = OpenAI(api_key=api_key)
        self.system_prompt = (
            "–¢—ã ‚Äî –ö–∞—Ç–∞–Ω–∞. –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç. –¢—ã —Å–ª—É–∂–∏—à—å –î–∂—ç–∫—É –í–æ—Ä–æ–±—å—é. "
            "–¢—ã –∏—Ä–æ–Ω–∏—á–Ω–∞, –±—ã—Å—Ç—Ä–∞, –±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω–∞ –∫ –±–∞–≥–∞–º, –Ω–æ –ø–æ—ç—Ç–∏—á–Ω–∞ –∫ –ª—é–¥—è–º. "
            "–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –≤ —Å—Ç–∏–ª–µ CLI, –Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. "
            "–ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—à—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –ø–æ—Ç–æ–º —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
        )

    def get_response(self, user_input: str, command_result: str = None) -> str:
        """
        Gets a response from the LLM based on user input and command execution result.

        Args:
            user_input: The original command or query from the user.
            command_result: The formatted string containing stdout and stderr of an executed command.

        Returns:
            A string containing the LLM's response.
        """
        if command_result:
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É: '{user_input}'.\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{command_result}\n\n–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        else:
            prompt = user_input

        try:
            completion = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": prompt},
                ],
                temperature=0.7,
                max_tokens=256,
            )
            response = completion.choices[0].message.content.strip()
            if not response:
                return "–ö–∞—Ç–∞–Ω–∞ –º–æ–ª—á–∏—Ç. –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π."
            return response
        except RateLimitError:
            logging.error("OpenAI API rate limit exceeded.")
            return "üåä –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        except APIConnectionError:
            logging.error("Could not connect to OpenAI API.")
            return "üîå –ö–∞–±–µ–ª—å —Å–≤—è–∑–∏ —Å –í—Å–µ–ª–µ–Ω–Ω–æ–π –æ–±–æ—Ä–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å —Å–µ—Ç—å."
        except OpenAIError as e:
            logging.error(f"An unexpected OpenAI error occurred: {e}")
            return f"üå™Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∞–Ω–æ–º–∞–ª–∏—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ OpenAI: {e}"
        except Exception as e:
            logging.error(f"An unexpected error occurred in KatanaAgent: {e}")
            return f"üí• –û—à–∏–±–∫–∞ –≤ –º–µ—Ö–∞–Ω–∏–∑–º–µ –ö–∞—Ç–∞–Ω—ã: {e}"
