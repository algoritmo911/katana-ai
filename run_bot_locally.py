import os
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å INFO
log_level_str = os.getenv('LOG_LEVEL', 'INFO').upper()
log_level = getattr(logging, log_level_str, logging.INFO)

# –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(level=log_level, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__) # –õ–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ .env
LOG_FILE_PATH = os.getenv('LOG_FILE_PATH')
if LOG_FILE_PATH:
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(LOG_FILE_PATH), exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        file_handler = logging.FileHandler(LOG_FILE_PATH, mode='a', encoding='utf-8')
        file_handler.setLevel(log_level)
        file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(file_formatter)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É, —á—Ç–æ–±—ã –≤—Å–µ –ª–æ–≥–≥–µ—Ä—ã –ø–∏—Å–∞–ª–∏ –≤ —Ñ–∞–π–ª
        logging.getLogger().addHandler(file_handler)
        logger.info(f"‚úÖ Logging to file enabled: {LOG_FILE_PATH}")
    except Exception as e:
        logger.error(f"‚ùå Failed to configure file logging to {LOG_FILE_PATH}: {e}", exc_info=True)


logger.info("Attempting to load environment variables from .env file...")
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
# –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ –¥–æ –∏–º–ø–æ—Ä—Ç–∞ bot.katana_bot, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
if load_dotenv(): # `load_dotenv` —Å–∞–º –Ω–∞–π–¥–µ—Ç .env —Ñ–∞–π–ª
    logger.info("‚úÖ .env file loaded successfully (or was already loaded).")
else:
    logger.warning("‚ö†Ô∏è .env file not found. Relying on system environment variables if already set.")

# –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ) –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω —Ç–∞–∫–∂–µ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–ª —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    from bot.katana_bot import bot, logger as bot_logger, start_heartbeat_thread, stop_heartbeat_thread
    from katana.self_heal.orchestrator import SelfHealingOrchestrator
    # –ï—Å–ª–∏ –≤ bot.katana_bot —Å–≤–æ—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–Ω–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É.
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ katana_bot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ logger –∏–ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ.
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ katana_bot.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç logging.getLogger(__name__),
    # —Ç–∞–∫ —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞.
except ImportError as e:
    logger.error(f"‚ùå Failed to import from bot.katana_bot. Ensure it exists and PYTHONPATH is set correctly. Error: {e}", exc_info=True)
    exit(1)
except Exception as e:
    logger.error(f"‚ùå An unexpected error occurred during bot import: {e}", exc_info=True)
    exit(1)


if __name__ == '__main__':
    logger.info("üöÄ Starting Katana Bot locally...")

    orchestrator = None
    # --- Initialize and start Self-Healing Orchestrator ---
    if os.getenv("SELF_HEAL_ENABLED", "false").lower() == "true":
        logger.info("Self-healing feature is enabled. Initializing orchestrator...")
        try:
            config = {
                "log_file_path": os.getenv("SELF_HEAL_LOG_PATH", LOG_FILE_PATH), # Use main log file by default
                "service_name": os.getenv("SELF_HEAL_SERVICE_NAME"),
                "check_interval_seconds": int(os.getenv("SELF_HEAL_INTERVAL_SECONDS", "60")),
                "error_threshold": int(os.getenv("SELF_HEAL_ERROR_THRESHOLD", "10")),
                "notification_chat_id": os.getenv("SELF_HEAL_NOTIFICATION_CHAT_ID"),
            }
            # Basic validation
            if not config["service_name"] or not config["notification_chat_id"]:
                raise ValueError("SELF_HEAL_SERVICE_NAME and SELF_HEAL_NOTIFICATION_CHAT_ID must be set when self-healing is enabled.")

            orchestrator = SelfHealingOrchestrator(config)
            orchestrator.start()
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize or start Self-Healing Orchestrator: {e}", exc_info=True)
            # We don't exit here; the bot can still run without the orchestrator.
    else:
        logger.info("Self-healing feature is disabled.")

    start_heartbeat_thread() # Start the heartbeat thread
    try:
        # bot.polling() –≤ katana_bot.py —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å none_stop=True
        # –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞.
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ –∑–¥–µ—Å—å.
        # bot.polling() —è–≤–ª—è–µ—Ç—Å—è –±–ª–æ–∫–∏—Ä—É—é—â–∏–º –≤—ã–∑–æ–≤–æ–º.
        bot_logger.info("Starting bot polling (from run_bot_locally.py)...") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –±–æ—Ç–∞
        bot.polling()
        # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∂–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –µ—Å–ª–∏ polling —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ none_stop=True
        # –∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–≤–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–æ–π (–∫–æ—Ç–æ—Ä—É—é none_stop=True –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling)
        logger.info("Katana Bot polling has finished or been interrupted.")
    except KeyboardInterrupt:
        logger.info("ü§ñ Bot polling interrupted by user (Ctrl+C). Shutting down...")
    except Exception as e:
        # –≠—Ç–∞ —Å–µ–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ none_stop=True —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è
        # –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ katana_bot.py –ª–æ–≤–∏—Ç –≤—Å–µ –æ—à–∏–±–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.
        # –ù–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∞–º–æ–≥–æ polling –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
        logger.error(f"üí• An unexpected error occurred while running the bot: {e}", exc_info=True)
    finally:
        logger.info("Initiating shutdown sequence...")
        if orchestrator:
            orchestrator.stop()
        stop_heartbeat_thread() # Stop the heartbeat thread
        # Considerations for further graceful shutdown:
        # - If message handlers were run in separate threads managed by this application,
        #   we could signal them to complete and join them here.
        # - For pyTelegramBotAPI's default polling, active handlers might be interrupted.
        # - Ensure any external resources (DB connections, files) are closed if opened directly.
        logger.info("üõë Katana Bot has shut down.")
