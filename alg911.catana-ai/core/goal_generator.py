# =======================================================================================================================
# ID ПРОТОКОЛА: Telos-v1.0-TheSeagullNebula
# КОМПОНЕНТ: The Goal Generator (Дельфийский Оракул)
# ОПИСАНИЕ: Превращает 'желаемое будущее' в конкретную, достижимую цель.
# =======================================================================================================================

from typing import Dict, Optional, List, Any
import os

# Adjust path to import from the parent directory
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from schemas import PossibleFutureNode

class GoalGenerator:
    """
    The Goal Generator (or "Delphic Oracle") analyzes the Landscape of Desires
    to produce a single, high-level goal for the agent to pursue.
    """

    def _find_best_future(self, landscape: Dict[str, PossibleFutureNode]) -> Optional[PossibleFutureNode]:
        """Finds the leaf node with the highest value score."""
        leaf_nodes = [node for node in landscape.values() if not node.children_ids]
        if not leaf_nodes:
            return None

        best_node = max(leaf_nodes, key=lambda node: node.value_score or -1.0)
        return best_node

    def _trace_optimal_path(self, best_node: PossibleFutureNode, landscape: Dict[str, PossibleFutureNode]) -> List[PossibleFutureNode]:
        """Traces the path from a node back to the root."""
        path = []
        current_node = best_node
        while current_node is not None:
            path.append(current_node)
            if current_node.parent_id:
                current_node = landscape.get(current_node.parent_id)
            else:
                break
        path.reverse() # The path is now from root to best_node
        return path

    def _format_action_as_goal(self, action: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Converts a simulation action into a high-level goal for the OODA-P loop."""
        action_name = action.get("name")
        params = action.get("params", {})

        if action_name == "expand_knowledge":
            return {
                "goal": "acquire_and_structure_knowledge",
                "priority": 0.8, # Self-generated goals start with high priority
                "details": {"topic": params.get("topic", "general")},
                "source": "TelosGoalGenerator"
            }
        elif action_name == "reduce_system_fatigue":
            return {
                "goal": "perform_system_maintenance",
                "priority": 0.7,
                "details": {"task": "reduce_fatigue"},
                "source": "TelosGoalGenerator"
            }
        # Add other mappings as needed
        return None

    def generate_goal(self, landscape: Dict[str, PossibleFutureNode]) -> Optional[Dict[str, Any]]:
        """
        Generates a high-level goal from the Landscape of Desires.

        :param landscape: The scored graph of possible futures.
        :return: A high-level goal dictionary, or None if no goal can be formed.
        """
        best_future_node = self._find_best_future(landscape)
        if not best_future_node:
            print("GoalGenerator: No best future found.")
            return None

        optimal_path = self._trace_optimal_path(best_future_node, landscape)

        # The first step is the action taken from the root node to the second node on the path.
        if len(optimal_path) < 2:
            print("GoalGenerator: Optimal path is too short to define a first step.")
            return None

        first_step_node = optimal_path[1]
        action_to_take = first_step_node.action_taken

        if not action_to_take:
            return None

        return self._format_action_as_goal(action_to_take)

if __name__ == '__main__':
    # This test requires a full landscape, which is generated by the other components.
    # A dedicated integration test file would be better.
    # For now, let's mock the data to test the logic here.

    print("--- GoalGenerator Test ---")

    # 1. Mock a landscape
    root_node = PossibleFutureNode(node_id="root", state={}, depth=0, children_ids=["child1"])
    child1_action = {"name": "expand_knowledge", "params": {"topic": "cybernetics"}}
    child1 = PossibleFutureNode(node_id="child1", parent_id="root", state={}, depth=1, action_taken=child1_action, value_score=0.8, children_ids=["leaf1"])
    leaf1 = PossibleFutureNode(node_id="leaf1", parent_id="child1", state={}, depth=2, value_score=0.9)

    child2_action = {"name": "wait", "params": {}}
    child2 = PossibleFutureNode(node_id="child2", parent_id="root", state={}, depth=1, action_taken=child2_action, value_score=0.5, children_ids=["leaf2"])
    leaf2 = PossibleFutureNode(node_id="leaf2", parent_id="child2", state={}, depth=2, value_score=0.4)

    mock_landscape = {
        "root": root_node, "child1": child1, "leaf1": leaf1, "child2": child2, "leaf2": leaf2
    }

    # 2. Generate a goal
    goal_gen = GoalGenerator()
    generated_goal = goal_gen.generate_goal(mock_landscape)

    print("Generated Goal:", generated_goal)

    # 3. Verification
    assert generated_goal is not None
    assert generated_goal["goal"] == "acquire_and_structure_knowledge"
    assert generated_goal["details"]["topic"] == "cybernetics"

    print("\n--- GoalGenerator Verified ---")
