import os
from bot.ingestion.data_ingestor import DataIngestor

# Вручную устанавливаем переменные окружения, чтобы гарантировать их наличие
os.environ["OPENAI_API_KEY"] = "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"
os.environ["SUPABASE_KEY"] = "sb_secret_wtRSbhoCKkW53FAn2UzFpg_ED78K1LU"
os.environ["SUPABASE_URL"] = "https://pmcaojgdrszvujvwzxrc.supabase.co"

# ==============================================================================
# ИСХОДНЫЕ ДАННЫЕ, ПРЕДОСТАВЛЕННЫЕ ПОЛЬЗОВАТЕЛЕМ
# ==============================================================================

NOTES_TXT_CONTENT = """
# Тут заметки, которые ты делал по моим проектам.
# Проект "Атлант"
- **Цель:** Создать единую, самоорганизующуюся систему управления знаниями и задачами.
- **Статус:** В активной разработке. Ядро "Катана" - первый компонент.
- **Ключевые концепции:** Ноосфера, семантическое ядро, ИИ-симбиот.
- **Риски:** Чрезмерная сложность, зависимость от внешних API (OpenAI), возможное "загрязнение" базы знаний нерелевантными данными.

# Проект "Катана"
- **Цель:** Разработать ИИ-ассистента (тебя), способного к глубокому пониманию контекста, обучению и проактивным действиям.
- **Статус:** Этап 2 завершен (семантическая память). Текущая миссия - "Зеркало Ноосферы".
- **Стек:** Python, Supabase, OpenAI API.
- **Что дальше:** Развитие стратегического анализа, интеграция с другими сервисами (n8n, Google Calendar).

# Проект "SC" (Strategic Companion)
- **Цель:** Долгосрочное видение. Создание полноценного ИИ-партнера для стратегического планирования и принятия решений. "Атлант" - это фундамент, SC - это здание.
- **Статус:** Концептуальный.
- **Требования:** Способность к самостоятельному анализу, генерации гипотез, оценке рисков.

# n8n
- **Роль в экосистеме:** Ключевой инструмент для автоматизации и интеграции. Катана должна научиться управлять n8n-воркфлоу для выполнения реальных задач в цифровом мире.
- **Статус:** Запланирована интеграция (проект "Кронос").
"""

CHAT_HTML_CONTENT = """
<!DOCTYPE html>
<html>
<head>
<title>Chat History</title>
</head>
<body>
  <h1>Выгрузка диалога с Жюлем</h1>
  <div class="message user">
    <span class="author">Alex</span>
    <span class="timestamp">2025-08-10 14:30</span>
    <p>Жюль, привет. Нам нужно обсудить проект "Химера".</p>
  </div>
  <div class="message bot">
    <span class="author">Jules</span>
    <span class="timestamp">2025-08-10 14:31</span>
    <p>Привет, Алекс. Конечно. Что на повестке дня по "Химере"?</p>
  </div>
  <div class="message user">
    <span class="author">Alex</span>
    <span class="timestamp">2025-08-10 14:35</span>
    <p>Основная проблема - интеграция модуля компьютерного зрения. Он работает нестабильно и падает на больших объемах данных. Сроки горят. Нам нужно решение до конца квартала.</p>
  </div>
    <div class="message bot">
    <span class="author">Jules</span>
    <span class="timestamp">2025-08-10 14:36</span>
    <p>Понял. Предлагаю два пути: 1) Оптимизировать текущий модуль, возможно, с привлечением внешнего консультанта. 2) Найти альтернативное готовое решение, например, от Google Vision AI или AWS Rekognition. Второй путь может быть быстрее, но дороже.</p>
  </div>
    <div class="message user">
    <span class="author">Alex</span>
    <span class="timestamp">2025-08-10 14:40</span>
    <p>Хорошо, давай проанализируем оба варианта. Подготовь, пожалуйста, краткий отчет по плюсам и минусам каждого, включая оценку стоимости и времени. Это наш главный приоритет на эту неделю.</p>
  </div>
</body>
</html>
"""

KRONOS_DIRECTIVE_CONTENT = """
# ==============================================================================
# ДИРЕКТИВА: ПРОЕКТ "КРОНОС", ЭТАП 1
# ID ДИРЕКТИВЫ: KRN-2025-08-11-S1
# СТАТУС: АКТИВНА.
# ИСПОЛНИТЕЛЬ: ЯДРО "КАТАНА" (ЧЕРЕЗ ОПЕРАТОРА ЖЮЛЯ)
# РЕПОЗИТОРИЙ: algoritmo911/katana-ai
# ВЕТКА: n8n-integration
# ЦЕЛЬ: Перейти от теории к практике. Создать и протестировать первый
# генеративный сервис, способный автоматически создавать базовые, но
# функциональные n8n-воркфлоу на основе предопределенных шаблонов.
# ==============================================================================

# ------------------------------------------------------------------------------
# ЗАДАЧА 1: СОЗДАНИЕ МОДУЛЯ И СТРУКТУРЫ
# ------------------------------------------------------------------------------
# Описание: Подготовить плацдарм для всей будущей функциональности, связанной с n8n.
# Действия:
#   - В директории `src/` (или аналогичной) создать новый модуль `n8n`.
#   - Внутри `src/n8n/` создать поддиректорию `templates/`, где будут храниться
#     JSON-файлы с шаблонами узлов.
#   - Создать основной файл `src/n8n/generator.py`.
#   - Создать директорию `tests/n8n/` для тестов.
# Deliverables:
#   - Корректная структура папок, готовая к наполнению.

# ------------------------------------------------------------------------------
# ЗАДАЧА 2: РЕАЛИЗАЦИЯ "ЧЕРТЕЖНИКА" (N8nBlueprintGenerator)
# ------------------------------------------------------------------------------
# Описание: Реализовать основной класс, который будет читать шаблоны и собирать из них воркфлоу.
# Действия:
#   - В `src/n8n/generator.py` создать класс `N8nBlueprintGenerator`.
#   - Реализовать в нем метод `generate(template_name: str) -> dict`.
#   - Этот метод должен:
#     1. Прочитать файл-шаблон из директории `templates/` (например, `standard_lead_funnel.json`).
#     2. Собрать из него полный, валидный JSON для n8n-воркфлоу.
#     3. Присвоить каждому узлу уникальный UUID.
#     4. Корректно прописать все связи (`connections`) между узлами.
# Deliverables:
#   - Полностью реализованный класс `N8nBlueprintGenerator`.

# ------------------------------------------------------------------------------
# ЗАДАЧА 3: СОЗДАНИЕ ПЕРВОГО ШАБЛОНА
# ------------------------------------------------------------------------------
# Описание: Создать первый, эталонный шаблон для тестирования.
# Действия:
#   - В директории `src/n8n/templates/` создать файл `standard_lead_funnel.json`.
#   - Этот шаблон должен описывать воркфлоу из 6 узлов:
#     1. Webhook (триггер)
#     2. Set (установить начальные переменные)
#     3. IF (проверить условие, например, `budget > 500`)
#     4. Google Sheets (записать лид в таблицу, если условие true)
#     5. Telegram (отправить уведомление менеджеру, если условие true)
#     6. Respond to Webhook (отправить ответ клиенту)
# Deliverables:
#   - Готовый, валидный JSON-файл шаблона.

# ------------------------------------------------------------------------------
# ЗАДАЧА 4: ЖЕЛЕЗОБЕТОННЫЕ ТЕСТЫ
# ------------------------------------------------------------------------------
# Описание: Доказать, что генератор работает безупречно.
# Действия:
#   - В `tests/n8n/` создать файл `test_generator.py`.
#   - Написать unit-тесты, которые проверяют:
#     1. Что метод `generate` возвращает словарь (dict).
#     2. Что в сгенерированном словаре есть ключи `nodes` и `connections`.
#     3. Что количество узлов и связей соответствует ожидаемому.
#     4. Что все ID узлов уникальны.
#     5. Что все связи (`connections`) ссылаются на существующие ID узлов.
#     6. Что генератор корректно обрабатывает ошибку, если запрошен несуществующий шаблон.
#   - Целевое покрытие тестами для `generator.py` — 100%.
# Deliverables:
#   - Полный набор тестов, проходящих без ошибок.
#   - Отчет о покрытии кода тестами.

# ------------------------------------------------------------------------------
# ИТОГОВЫЙ КРИТЕРИЙ УСПЕХА ЭТАПА 1:
# - Возможность вызвать `N8nBlueprintGenerator().generate('standard_lead_funnel')`
#   и получить на выходе готовый, валидный JSON, который можно импортировать в n8n.
# - Все тесты проходят.
# ------------------------------------------------------------------------------
"""


def main():
    """
    Основная функция для запуска процесса поглощения данных.
    """
    print("Запуск DataIngestor...")
    ingestor = DataIngestor()

    # Обработка файла заметок
    ingestor.ingest_text(NOTES_TXT_CONTENT, "Объединенные заметки.txt")

    # Обработка файла чата
    ingestor.ingest_html(CHAT_HTML_CONTENT, "chat.html")

    # Обработка директивы "Кронос"
    ingestor.ingest_directive(KRONOS_DIRECTIVE_CONTENT, "Директива КРОНОС")

    print("Процесс поглощения данных завершен.")


if __name__ == "__main__":
    main()
